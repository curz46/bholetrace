#version 430

#define M_PI 3.1415926535897932384626433832795

layout (local_size_x = 1, local_size_y = 1) in;

layout (rgba32f, binding = 0) uniform image2D destTex;
uniform samplerCube skybox;

layout (location = 0) uniform vec2 size;

struct Camera {
    vec3 pos;
    vec3 rot;
    float fov;
};

layout (location = 1) uniform Camera camera;

uniform bool deflection;

float solve_quadratic(float a, float b, float c) {
    float x0, x1;
    float d = b * b - 4 * a * c;
    if (d < 0)
        return -1.;
    else if (d == 0)
        x0 = x1 = -0.5 * b / a;
    else {
        float q = b > 0
            ? -0.5 * (b + sqrt(d))
            : -0.5 * (b - sqrt(d));
        x0 = q / a;
        x1 = c / q;
    }
    if (x0 < x1)
        return x0;
    else
        return x1;
}

bool intersect_sphere(vec3 spos, float radius, vec3 origin, vec3 dir) {
    vec3 L = origin - spos;
    float a = dot(dir, dir);
    float b = 2 * dot(dir, L);
    float c = dot(L, L) - radius*radius;
    float t0 = solve_quadratic(a, b, c);
    return t0 > 0;
}

vec3 rx(vec3 v, float angle) {
    vec3 ret;

    if (angle != 0) {
        angle = radians(angle);
        ret.x = v.x;
        ret.y = v.y * cos(angle) - v.z * sin(angle);
        ret.z = v.y * sin(angle) + v.z * cos(angle);
        return ret;
    }
    return v;
}

vec3 ry(vec3 v, float angle) {
    vec3 ret;

    if (angle != 0) {
        angle = radians(angle);
        ret.x = v.x * cos(angle) + v.z * sin(angle);
        ret.y = v.y;
        ret.z = v.z * cos(angle) - v.x * sin(angle);
        return ret;
    }
    return v;
}

vec3 rz(vec3 v, float angle) {
    vec3 ret;

    if (angle != 0) {
        angle = radians(angle);
        ret.x = v.x * cos(angle) - v.y * sin(angle);
        ret.y = v.x * sin(angle) + v.y * cos(angle);
        ret.z = v.z;
        return ret;
    }
    return v;
}

vec3 rotate(vec3 v, vec3 r) {
    v = rx(v, r.x);
    v = ry(v, r.y);
    v = rz(v, r.z);
    return v;
}

vec3 ppos_dir(vec2 pos) {
    return normalize(vec3(
        (size.x/2) - pos.x,
        (size.y/2) - pos.y,
        (size.x/2) / tan(radians(camera.fov/2))
    ));
}

//https://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/
mat4 rotate_about_plane(vec3 axis, float angle) {
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;

    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

float f(float a, float u, float z) {
    return z;
}

float g(float a, float u, float z) {
    return -u + (3/2)*u*u;
}

vec2 converge_r0(float a0, float u0, float z0, float max_u, float target_da) {
    float h=0.5;
    float al=a0;
    float ul=u0;
    for (int i = 0; i < 500; i++) {
        float k1 = h * (f(a0, u0, z0));
        float l1 = h * (g(a0, u0, z0));
        float k2 = h * (f((a0+h/2), (u0+k1/2), (z0+l1/2)));
        float l2 = h * (g((a0+h/2), (u0+k1/2), (z0+l1/2)));
        float k3 = h * (f((a0+h/2), (u0+k2/2), (z0+l2/2)));
        float l3 = h * (g((a0+h/2), (u0+k2/2), (z0+l2/2)));
        float k4 = h * (f((a0+h), (u0+k3), (z0+l3)));
        float l4 = h * (g((a0+h), (u0+k3), (z0+l3)));
        float k = (k1+2*k2+2*k3+k4)/6;
        float l = (l1+2*l2+2*l3+l4)/6;
        a0=a0+h;
        u0=u0+k;
        z0=z0+l;
        if (u0>max_u)
            return vec2(a0, -1);
        if (i>40 && abs(al-a0)<target_da)
            return vec2(a0, u0);
        if (ul>u0)
            h=-h/4;
        al=a0;
        ul=u0;
    }
    return vec2(a0,u0);
}

void main() {
    vec2 ppos = gl_GlobalInvocationID.xy;
    vec3 direction = normalize(rotate(ppos_dir(ppos), camera.rot));

    vec3 spos = vec3(0., 0., 0.);
    float radius = 1;
    vec4 color;

    // get point on ray line
    vec3 p = camera.pos;

    // impact parameter
    float b = length( cross(direction, p - spos) );

    if (deflection) {
        vec2 result = converge_r0(0,0,1/b,100,0.00000001);
        if (result[1] == -1) {
            color = vec4(0,0,0,1);
        } else {
            float angle = result[0]*2 - M_PI;
            //angle = 0;

            // calculate normal N of plane containing black hole and ray   
            vec3 l = p - spos;
            vec3 N = cross(direction, l);
            // rotate ray on plane by angle
            vec4 resultant = rotate_about_plane(N, angle) * vec4(direction,1);

            color = texture(skybox, resultant.xyz);
        }
    } else {
        if (intersect_sphere(spos, radius, camera.pos, direction))
            color = vec4(0, 0., 0., 1.);
        else
            color = texture(skybox, direction);
    }

    imageStore(destTex, ivec2(ppos), color);
}
